#!/system/bin/sh

#全局变量(默认参数)
#可以通过配置文件设置
#虚拟网卡名称
TunDev=vtun
#日志级别,留空不使用
#"debug" | "info" | "warning" | "error" | "none"
loglevel=none
#放行除tcp,udp外的流量(1放行)
fxqt=1
#IPV6禁网
#denyIPV6=1

#=================================
DIR="${0%/*}"
cd $DIR/../
. ./config.ini
if [ -z "$addr" ]; then
  if echo $file | grep -q ","; then
    file1=${file%,*}
    file2=${file#*,}
  else
    file1=$file
  fi
  if [ -n "$file2" ]; then
    if [ ! -e 节点/$file1.ini ] || [ ! -e 节点/$file2.ini ]; then
      echo "\033[5;34m 请检查配置文件是否正确!" && exit 1
    fi
  else
    if [ ! -e 节点/$file1.ini ]; then
      echo "\033[5;36m 请检查配置文件是否正确!" && exit 1
    fi
  fi
fi
export PATH=$DIR:$PATH

# 不支持TPROXY的手机强制使用tun2socks(dns需要)
if ! grep -q TPROXY /proc/net/ip_tables_targets; then
  useTun=1
fi

# 防止执行iptables出问题导致有些规则没执行
if iptables --help 2>&- | grep -q "xtables"; then
  alias iptables="iptables -w"
else
  iptables() {
    /system/bin/iptables $@
    tmp=$?
    [ "$tmp" = "4" ] && iptables $@
    return $tmp
  }
fi

clear_rules() {
  while iptables -t nat -D OUTPUT -j nat_OUT; do :; done
  while iptables -t nat -D PREROUTING -j nat_PRE; do :; done
  while iptables -t mangle -D OUTPUT -j man_OUT; do :; done
  while iptables -t mangle -D PREROUTING -j man_PRE; do :; done
  iptables -t nat -F nat_OUT
  iptables -t nat -X nat_OUT
  iptables -t nat -F nat_PRE
  iptables -t nat -X nat_PRE
  iptables -t mangle -F man_OUT
  iptables -t mangle -X man_OUT
  iptables -t mangle -F man_PRE
  iptables -t mangle -X man_PRE
  while iptables -D FORWARD -i $TunDev -j ACCEPT; do :; done
  while iptables -D FORWARD -o $TunDev -j ACCEPT; do :; done
  iptables -t mangle -P FORWARD ACCEPT
  while iptables -t mangle -D FORWARD -p udp -j ACCEPT; do :; done
  while iptables -t mangle -D FORWARD -p icmp -j ACCEPT; do :; done
  while iptables -t mangle -D PREROUTING ! -p udp -j ACCEPT; do :; done
  # 关闭程序
  busybox killall tun2socks xray 2>&-
  # 清除ip规则
  while ip route del local default dev lo table 1234; do :; done
  while ip route del default dev $TunDev table 1234; do :; done
  while ip rule del fwmark 0x1234 lookup 1234; do :; done
  ip tuntap del mode tun $TunDev
  # 清除IPV6禁网规则
  if ip6tables -t mangle -S 2>&- | grep -q '0x1122'; then
    while ip6tables -t mangle -D OUTPUT -p icmpv6 -m owner --uid 0 -j ACCEPT; do :; done
    while ip6tables -t mangle -D OUTPUT ! -o wlan+ -j MARK --set-mark 0x1122; do :; done
    ip6tables -t mangle -P FORWARD ACCEPT
    while ip -6 rule del fwmark 0x1122 unreachable; do :; done
  fi
}

v2tun_start(){
  [ ! -e "/dev/net/tun" ] && mkdir -p /dev/net && ln -s /dev/tun /dev/net/tun && echo 1 > /proc/sys/net/ipv4/ip_forward
  ip tuntap add mode tun $TunDev >/dev/null 2>&1
  ip addr add 10.0.0.10/24 dev $TunDev >/dev/null 2>&1
  ip link set $TunDev up >/dev/null 2>&1
  nohup tun2socks --tundev $TunDev --netif-ipaddr 10.0.0.9 --netif-netmask 255.255.255.0 --socks-server-addr 127.0.0.1:1231 --enable-udprelay --loglevel 1 >/dev/null 2>&1 &
}

# 通过包名得到uid
get_package_uid() {
  packageName=${1%%_*}  #过滤包名后面的端口
  if echo $packageName | grep -q '[A-Za-z]'; then
    packageInfo=`grep -oE "^$packageName ([0-9])+" /data/system/packages.list`
    [ $? != 0 ] && return 1
    echo "$1" | grep -qE '_([0-9])+' && \
      echo "${packageInfo#* }_${1#*_}" || \
      echo "${packageInfo#* }"
  else
    echo "$1"
  fi
}

start_rules() {
  # 防止usb共享清一些规则造成不免
  iptables -t mangle -P FORWARD DROP
  iptables -t mangle -A FORWARD -p udp -j ACCEPT
  iptables -t mangle -A FORWARD -p icmp -j ACCEPT
  iptables -t mangle -A PREROUTING ! -p udp -j ACCEPT
  # mangle OUTPUT
  iptables -t mangle -N man_OUT
  iptables -t mangle -N man_PRE
  iptables -t mangle -A OUTPUT -j man_OUT
  iptables -t mangle -A PREROUTING -j man_PRE
  iptables -t mangle -A man_OUT -m owner --gid-owner 2222 -j ACCEPT
  [ "$wifiProxy" = "1" ] || iptables -t mangle -A man_OUT -o wlan+ -j ACCEPT
  iptables -t mangle -A man_OUT -o tun+ -j ACCEPT
  # mangle PREROUTING
  allow_ip="10/8,100/8,127/8,169.254/16,172.16/12,192/24,192.168/16,224/4,240/4"
  iptables -t mangle -A man_PRE -d $allow_ip -j ACCEPT
  if [ "$useTun" == '1' ]; then
  # tun2socks/TPROXY 选择
    v2tun_start
    ip route add default dev $TunDev table 1234
    ip rule add fwmark 0x1234 lookup 1234
    iptables -t mangle -A man_PRE ! -i tun+ -p udp -j MARK --set-mark 0x1234
    iptables -t mangle -A man_OUT ! -d 192.168/16 ! -o lo -p udp -j MARK --set-mark 0x1234
    iptables -I FORWARD -i $TunDev -j ACCEPT
    iptables -I FORWARD -o $TunDev -j ACCEPT
  else
    ip route add local default dev lo table 1234
    ip rule add fwmark 0x1234 lookup 1234
    iptables -t mangle -A man_PRE ! -i tun+ -p udp -j TPROXY --on-port 1231 --tproxy-mark 0x1234
    iptables -t mangle -A man_OUT ! -d 192.168/16 ! -o lo -p udp -j MARK --set-mark 0x1234
  fi
  # nat OUTPUT
  iptables -t nat -N nat_OUT
  iptables -t nat -N nat_PRE
  iptables -t nat -A OUTPUT -j nat_OUT
  iptables -t nat -A PREROUTING -j nat_PRE
  iptables -t nat -A nat_OUT -m owner --gid-owner 2222 -j ACCEPT
  [ "$wifiProxy" = "1" ] || iptables -t nat -A nat_OUT -o wlan+ -j ACCEPT
  iptables -t nat -A nat_OUT -o tun+ -j ACCEPT
  iptables -t nat -A nat_OUT -o lo -j ACCEPT
  # 防止WiFi共享获取不到ip
  iptables -t nat -A nat_OUT -d 192.168/16 -j ACCEPT
  iptables -t nat -A nat_OUT -p tcp -j REDIRECT --to-ports 1230
  [ "$fxqt" != '1' ] && iptables -t nat -A nat_OUT ! -p udp -j REDIRECT --to-ports 1250
  # nat PREROUTING
  iptables -t nat -A nat_PRE -s 192.168/16 ! -d 192.168/16 -p tcp -j REDIRECT --to-ports 1230
  [ "$fxqt" != '1' ] && iptables -t nat -A nat_PRE ! -p udp -j REDIRECT --to-ports 1250

  # IPV6禁网
  if [ "$denyIPV6" = 1 ]; then
    ip6tables -t mangle -A OUTPUT -p icmpv6 -m owner --uid 0 -j ACCEPT
    ip6tables -t mangle -A OUTPUT ! -o wlan+ -j MARK --set-mark 0x1122
    ip6tables -t mangle -P FORWARD DROP
    ip -6 rule add fwmark 0x1122 unreachable
  fi

  # 放行规则
  # 本地TCP放行 nat OUTPUT
  for app in $allowAppsTCP; do
    uid=`get_package_uid $app` || continue
    iptables -t nat -I nat_OUT -p tcp -m owner --uid ${uid%_*} `echo $uid|grep -q '_' && echo "-m multiport --dport ${uid#*_}"` -j ACCEPT
  done
  # 本地UDP放行 mangle OUTPUT
  for app in $allowAppsUDP; do
    uid=`get_package_uid $app` || continue
    iptables -t mangle -I man_OUT -p udp -m owner --uid ${uid%_*} `echo $uid|grep -q '_' && echo "-m multiport --dport ${uid#*_}"` -j ACCEPT
  done
  
  if [ "$kjzq" = 1 ]; then
     cat>/data/adb/service.d/zq.sh <<END
MODDIR=${0%/*}

[ -d /data/xray/ ] || cp -af ${0%/*}/xray /data/xray

sleep 10

/data/xray/*/"xray".bin start
END
  chmod 777 /data/adb/service.d/zq.sh
  else
      rm -f /data/adb/service.d/zq.sh
  fi
  
  # 本地全局放行 nat OUTPUT
  for app in $allowApps; do
    uid=`get_package_uid $app` || continue
    iptables -t nat -I nat_OUT -m owner --uid $uid -j ACCEPT
  done
  # 本地全局放行 mangle OUTPUT
  for app in $allowApps; do
    uid=`get_package_uid $app` || continue
    iptables -t mangle -I man_OUT -m owner --uid $uid -j ACCEPT
  done
  # 本地端口放行 nat OUTPUT & mangle OUTPUT
  [ "$allowTcpPorts" != "" ] && iptables -t nat -I nat_OUT -p tcp -m multiport --dports $allowTcpPorts -j ACCEPT
  [ "$allowUdpPorts" != "" ] && iptables -t mangle -I man_OUT -p udp -m multiport --dports $allowUdpPorts -j ACCEPT
  # 共享端口放行 nat PREROUTING & mangle PREROUTING
  [ "$allowShareTcpPorts" != "" ] && iptables -t nat -I nat_PRE -p tcp -m multiport --dports $allowShareTcpPorts -j ACCEPT
  [ "$allowShareUdpPorts" != "" ] && iptables -t mangle -I man_PRE -p udp -m multiport --dports $allowShareUdpPorts -j ACCEPT
}

data_control() {
  if [ "$netstat" != "$1" -a "$kgwl" = "1" ]; then
  wifiip=$(ip addr show wlan0 2>&- | grep 'inet')
    if [ "$wifiip" = "" ]; then
      [ "$1" = "y" ] && svc data enable && sleep 0.3
      [ "$1" = "n" ] && svc data disable
      netstat="$1"
    fi
  fi
}

start_server() {
  rm -f 核心/info
  #是否保留上次配置,不重新生成新的
  if [ "$keep" != "1" ]; then
    source 核心/makeconfig.bin
    [ "$?" = "111" ] && echo "域名解析失败！" && exit 1
  fi
  chmod 777 核心/*
  ulimit -n 65535
  [ -n "$loglevel" ] && outfile="核心/xray.log" || outfile="/dev/null"
  [ "$outfile" = "/dev/null" ] && rm -f 核心/xray.log
  (busybox setuidgid 0:2222 xray -config 核心/xray.json &>$outfile &)
}

clear_files() {
  sleep 0.1
  rm -f 节点/*.bak 核心/*.bak 核心/*.json
}

status_check() {
  ip addr | grep global | grep -E '[1-9]{1,3}[0-9]{0,2}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | \
  while read line
  do
    [ -z "$line" ] && break
    typeset -L17 netcard=${line##* }
    IP=${line%%/*}
    echo "$netcard${IP##* }"
  done
  echo
  [ -n "$IP" ] && echo

  [ -n "`busybox pidof xray`" -a -f "核心/info" ] && . 核心/info || rm -f 核心/info
  echo "\033[5;36m ✺ Core： "
  busybox pidof "xray" >/dev/null && echo "\033[5;35m ✔️️ xray  " || echo "\033[5;37m ❌ xray  "
  busybox pidof "tun2socks" >/dev/null && echo "\033[5;34m ✔️️ tun2socks  " || echo "\033[5;34m ❌ tun2socks  "
  echo
  [ -f "核心/info" ] && echo
  [ -n "$xfile" ] && echo "\033[5;36m ✺ 已加载配置文件： $xfile"
  [ -n "$xaddr" ] && echo "✺ Addr： $xaddr"
  [ -n "$xpath" ] && echo "✺ Path： $xpath"
  [ -n "$xhost" ] && echo "✺ Host： $xhost"
  [ -n "$yfile" ] && echo "\033[5;31m ✺ 已加载配置文件： $yfile"
  [ -n "$yaddr" ] && echo "✺ Addr： $yaddr"
  [ -n "$ypath" ] && echo "✺ Path： $ypath"
  [ -n "$yhost" ] && echo "✺ Host： $yhost"

  type iptables | grep -q "function" && unset -f iptables >> /dev/null 2>&1
  iptables -t nat -S 2>&- | busybox grep -wE 'nat_OUT|nat_PRE' >> /dev/null 2>&1
  iptables -t mangle -S 2>&- | busybox grep -wE 'man_OUT|man_PRE' >> /dev/null 2>&1
}

main() {
  if [ "$1" = "stop" ]; then
    rm -f 核心/info 2>&-
    clear_rules 2>&-
  elif [ -z "$1" -o "$1" = "start" ]; then
    clear_rules 2>&-
    start_server
    start_rules 2>&-
    data_control n
    data_control y
  fi
  #(clear_files &)
  status_check
}

main $1